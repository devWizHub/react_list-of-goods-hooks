{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","goods","setGoods","NONE","sortType","setSortType","isReversed","setReverse","isReset","setReset","useEffect","sortedGoods","sort","a","b","localeCompare","length","reverse","isOriginalOrder","className","type","onClick","ALPHABET","LENGTH","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,kDAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAA0BC,mBAAS,GAAD,OAAKF,IAAvC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAmBH,EAASM,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCL,oBAAS,GAA1C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAA4BP,oBAAS,GAArC,mBAAOQ,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IAAIC,EAAW,UAAOb,GAEtB,OAAQM,GACN,IAAK,WACHO,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC3C,MACF,IAAK,SACHH,EAAYC,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAEG,SAAWF,EAAEE,OAClBH,EAAEG,OAASF,EAAEE,OACbH,EAAEE,cAAcD,MAOtBR,IACFK,EAAcA,EAAYM,WAG5Bf,EAASS,KACR,CAACP,EAAUE,EAAYL,IAE1BS,qBAAU,WACJF,IACFH,EAAYR,EAASM,MACrBI,GAAW,GACXE,GAAS,MAEV,CAACD,IAEJ,IAAMU,GAAmBZ,GAAcF,IAAaP,EAASM,KAE7D,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAiC,aAAbf,EAA0B,GAAK,YAC5DiB,QAAS,kBAAMhB,EAAYR,EAASyB,WAHtC,iCAQA,wBACEF,KAAK,SACLD,UAAS,4BAAoC,WAAbf,EAAwB,GAAK,YAC7DiB,QAAS,kBAAMhB,EAAYR,EAAS0B,SAHtC,4BAQA,wBACEH,KAAK,SACLD,UAAS,6BAAsC,IAAfb,EAAsB,GAAK,YAC3De,QAAS,kBAAMd,GAAW,SAAAiB,GAAI,OAAKA,MAHrC,sBAQEN,GACA,wBACEE,KAAK,SACLD,UAAS,2BAAuBD,EAAuB,WAAL,IAClDG,QAAS,kBAAMZ,GAAS,IAH1B,sBAUJ,6BACGR,EAAMwB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCrGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f75b2511.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'NONE',\n  ALPHABET = 'ALPHABET',\n  LENGTH = 'LENGTH',\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState([...goodsFromServer]);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const [isReset, setReset] = useState(false);\n\n  useEffect(() => {\n    let sortedGoods = [...goodsFromServer];\n\n    switch (sortType) {\n      case 'ALPHABET':\n        sortedGoods.sort((a, b) => a.localeCompare(b));\n        break;\n      case 'LENGTH':\n        sortedGoods.sort((a, b) => {\n          return a.length !== b.length\n            ? a.length - b.length\n            : a.localeCompare(b);\n        });\n        break;\n      default:\n        break;\n    }\n\n    if (isReversed) {\n      sortedGoods = sortedGoods.reverse();\n    }\n\n    setGoods(sortedGoods);\n  }, [sortType, isReversed, goods]);\n\n  useEffect(() => {\n    if (isReset) {\n      setSortType(SortType.NONE);\n      setReverse(false);\n      setReset(false);\n    }\n  }, [isReset]);\n\n  const isOriginalOrder = !isReversed && sortType === SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType === 'ALPHABET' ? '' : 'is-light'}`}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType === 'LENGTH' ? '' : 'is-light'}`}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed === true ? '' : 'is-light'}`}\n          onClick={() => setReverse(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {!isOriginalOrder && (\n          <button\n            type=\"button\"\n            className={`button is-danger ${!isOriginalOrder ? '' : 'is-light'}`}\n            onClick={() => setReset(true)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}