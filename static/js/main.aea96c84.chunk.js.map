{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","goods","setGoods","sortType","setSortType","isReversed","setReverse","isReset","setReset","isOriginalOrder","useEffect","sortedGoods","sort","a","b","localeCompare","length","reverse","className","type","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"uOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOWC,EAAgB,WAC3B,MAA0BC,mBAAS,GAAD,OAAKF,IAAvC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAmB,QAAnD,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAiCJ,oBAAqB,GAAtD,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4BN,oBAAkB,GAA9C,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,GAAmBJ,GAA2B,SAAbF,EAkCvC,OAhCAO,qBAAU,WACR,IAAIC,EAAW,YAAOV,GAEtB,OAAQE,GACN,IAAK,WACHQ,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC3C,MACF,IAAK,SACHH,EAAYC,MAAK,SAACC,EAAGC,GACnB,OAAOD,EAAEG,SAAWF,EAAEE,OAClBH,EAAEG,OAASF,EAAEE,OACbH,EAAEE,cAAcD,MAOtBT,IACFM,EAAcA,EAAYM,WAGxBV,IACFI,EAAW,UAAOb,GAClBM,EAAY,QACZE,GAAW,GACXE,GAAS,IAGXN,EAASS,KACR,CAACR,EAAUE,EAAYE,IAGxB,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAiC,aAAbf,EAA0B,GAAK,YAC5DiB,QAAS,kBAAMhB,EAAY,aAH7B,iCAQA,wBACEe,KAAK,SACLD,UAAS,4BAAoC,WAAbf,EAAwB,GAAK,YAC7DiB,QAAS,kBAAMhB,EAAY,WAH7B,4BAQA,wBACEe,KAAK,SACLD,UAAS,6BAAsC,IAAfb,EAAsB,GAAK,YAC3De,QAAS,kBAAMd,GAAW,SAAAe,GAAI,OAAKA,MAHrC,sBAQEZ,GACA,wBACEU,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAAMZ,GAAS,IAH1B,sBAUJ,6BACE,6BACGP,EAAMqB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCnGpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aea96c84.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype SortType = 'NONE' | 'ALPHABET' | 'LENGTH';\ntype IsReversed = boolean;\ntype IsReset = boolean;\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState([...goodsFromServer]);\n  const [sortType, setSortType] = useState<SortType>('NONE');\n  const [isReversed, setReverse] = useState<IsReversed>(false);\n  const [isReset, setReset] = useState<IsReset>(false);\n\n  const isOriginalOrder = !isReversed && sortType === 'NONE';\n\n  useEffect(() => {\n    let sortedGoods = [...goods];\n\n    switch (sortType) {\n      case 'ALPHABET':\n        sortedGoods.sort((a, b) => a.localeCompare(b));\n        break;\n      case 'LENGTH':\n        sortedGoods.sort((a, b) => {\n          return a.length !== b.length\n            ? a.length - b.length\n            : a.localeCompare(b);\n        });\n        break;\n      default:\n        break;\n    }\n\n    if (isReversed) {\n      sortedGoods = sortedGoods.reverse();\n    }\n\n    if (isReset) {\n      sortedGoods = [...goodsFromServer];\n      setSortType('NONE');\n      setReverse(false);\n      setReset(false);\n    }\n\n    setGoods(sortedGoods);\n  }, [sortType, isReversed, isReset]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType === 'ALPHABET' ? '' : 'is-light'}`}\n          onClick={() => setSortType('ALPHABET')}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType === 'LENGTH' ? '' : 'is-light'}`}\n          onClick={() => setSortType('LENGTH')}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed === true ? '' : 'is-light'}`}\n          onClick={() => setReverse(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {!isOriginalOrder && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setReset(true)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}